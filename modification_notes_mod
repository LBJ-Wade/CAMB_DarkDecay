modification_notes_mod

compares CAMB-Feb09/modules.f90 with camb_mod/modules_new.f90

_____________________________

1. do nothing
37c37
<         character(LEN=*), parameter :: version = 'Sept_08'
---
>         character(LEN=*), parameter :: version = 'May_10'



2. skipping this, think already improved...?
43a44,50
>
>         logical, parameter :: do_bispectrum = .false.
>           !parameter tweaks for calculating separable bispectra
>           !uncomment code in CalcScalCls in cmbmain.f90 to actually calculate the bispectrum
>         logical, parameter :: hard_bispectrum = do_bispectrum .and. .false. !!! e.g. warm inflation where delicate cancellations
>
>         logical, parameter :: full_bessel_integration = do_bispectrum !(go into the tails when calculating the sources)



3.why is this?
53c60
<         integer, parameter :: max_transfer_redshifts = 128
---
>         integer, parameter :: max_transfer_redshifts = 500    !!!



4. already there
85a93
>          logical   :: want_zstar, want_zdrag     !!JH for updated BAO likelihood.



5.
93a102,103
>          ! MODIFIED
>          real(dl)  :: omegas,alpha



6.
158a169,170
>           ! MODIFIED
>         real(dl) grhos,io



7.arbitrary
192c204
<       integer, parameter :: lmin = 2
---
>       integer, parameter :: lmin = 2  !!!!!



8. already updated
205c217
<       integer, parameter :: lmax_arr = 100+l0max/7
---
>       integer, parameter :: lmax_arr = l0max !!!100+l0max/7



9.
320a333,335
>              ! MODIFIED
>            grhos=grhom*CP%omegas
>            io=(3._dl+4._dl*CP%alpha)/(1._dl+CP%alpha)



10.
322,324c337,339
<            adotrad = sqrt((grhog+grhornomass+sum(grhormass(1:CP%Nu_mass_eigenstates)))/3)
<
<
---
>         !   adotrad = sqrt((grhog+grhornomass+sum(grhormass(1:CP%Nu_mass_eigenstates)))/3)
>            adotrad = sqrt((grhos+grhog+grhornomass+sum(grhormass(1:CP%Nu_mass_eigenstates)))/3)
>



11. ?????
363a379,387
>
>            write(*,'("Om_b h^2             = ",f9.6)') CP%omegab*(CP%H0/100)**2
>            write(*,'("Om_c h^2             = ",f9.6)') CP%omegac*(CP%H0/100)**2
>            write(*,'("Om_nu h^2            = ",f9.6)') CP%omegan*(CP%H0/100)**2
>            write(*,'("Om_Lambda            = ",f9.6)') CP%omegav
>            write(*,'("Om_K                 = ",f9.6)') CP%omegak
>            write(*,'("Sterile neutrinos    = ",f9.6)') CP%omegas
>            write(*,'("Om_m (1-Om_K-Om_L)   = ",f9.6)') 1-CP%omegak-CP%omegav
>            write(*,'("100 theta (CosmoMC)  = ",f9.6)') 100*CosmomcTheta()



12.
372a397
>               write(*,'("Sterile neutrinos    = ",f9.6)') CP%omegas



13. already modified
491a517
> !          R = 3*grhob*a / (4*grhog) //above is mostly within 0.2% and used for previous consistency



14. arbitrary
508d533
<



15. already done
557a583,594
>
>         if (lSampleBoost >=50) then
>          !just do all of them
>          lind=0
>          do lvar=lmin, max_l
>            lind=lind+1
>            ls(lind)=lvar
>          end do
>          lSet%l0=lind
>          lSet%l(1:lind) = ls(1:lind)
>          return
>         end if



16. ummm....there isn't actually a change here
901a939
>         end subroutine output_cl_files




17. already done
902a941,951
>         subroutine output_lens_pot_files(LensPotFile, factor)
>         implicit none
>         integer in,il
>         real(dl), intent(in), optional :: factor
>         real(dl) fact, scale
>         character(LEN=*) LensPotFile
>          !output file of dimensionless [l(l+1)]^2 C_phi_phi/2pi and [l(l+1)]^(3/2) C_phi_T/2pi
>          !This is the format used by Planck_like but original LensPix uses scalar_output_file.
>
>          !(Cl_scalar and scalar_output_file numbers are instead l^4 C_phi and l^3 C_phi
>          ! - for historical reasons)



18. already modified differently; so I'm not changing
903a953,976
>         if (present(factor)) then
>           fact = factor
>         else
>           fact =1
>         end if
>
>         if (CP%WantScalars .and. CP%DoLensing .and. LensPotFile/='') then
>
>            open(unit=fileio_unit,file=LensPotFile,form='formatted',status='replace')
>            do in=1,CP%InitPower%nn
>              do il=lmin,min(10000,CP%Max_l)
>                scale = (real(il+1)/il)**2/OutputDenominator
>                write(fileio_unit,'(1I6,2E15.5)') il , scale*Cl_scalar(il,in,C_Phi),&
>                    (real(il+1)/il)**1.5/OutputDenominator*sqrt(factor)*Cl_scalar(il,in,C_PhiTemp)
>              end do
>              do il=10100,CP%Max_l, 100
>                scale = (real(il+1)/il)**2/OutputDenominator
>                write(fileio_unit,'(1I6,2E15.5)') il , scale*Cl_scalar(il,in,C_Phi),&
>                    (real(il+1)/il)**1.5/OutputDenominator*sqrt(factor)*Cl_scalar(il,in,C_PhiTemp)
>              end do
>             end do
>             close(fileio_unit)
>          end if
>         end subroutine output_lens_pot_files



19. says to add an extra in prev. modification, then delete original; skip this
905d977
<         end subroutine output_cl_files



20. just a comment....
1523a1596
>         ! MODIFIED



21.
1526c1599,1600
<                               Transfer_tot=7
---
>                               Transfer_s = 7, Transfer_tot = 8
>                            !   Transfer_tot=7



22. already changed
1681c1755
<           deallocate(PK_data%redshifts)
---
>           deallocate(PK_data%redshifts,stat=i)


23. already updated
2071c2145
<
---
>         real(dl) :: r_drag0, z_star, z_drag  !!JH for updated BAO likelihood.


24. already changed, and also has extra 'GetBackgroundEvolution'
2073c2147,2148
<                Thermo_OpacityToTime,matter_verydom_tau, ThermoData_Free
---
>                Thermo_OpacityToTime,matter_verydom_tau, ThermoData_Free,&
>                z_star, z_drag !!JH for updated BAO likelihood.



25. arbitrary
2159d2233
<



26. arbitrary
2161d2234
<



27. already updated
2170,2171c2243,2245
<         thomc0=5.0577d-8*CP%tcmb**4
<
---
>         thomc0= Compton_CT * CP%tcmb**4
>         !thomc0=5.0577d-8*CP%tcmb**4
>



28. arbitrary
2239a2314
>



29. arbitrary
2254a2330,2331
>
>



30. arbitrary? already changed
2296c2373
< ! Getting the starting and finishing times for decoupling a+nd time of maximum visibility
---
> ! Getting the starting and finishing times for decoupling and time of maximum visibility



31. arbitrary
2329d2405
<



32. arbitrary
2332d2407
<



33. similar modification already made
2337a2413
>               if (hard_bispectrum) dtaurec = dtaurec / 4



34. arbitrary
2339c2415
<
---
>



35. already modified differently; probably an improvement--> I wont change
2362a2439,2446
>         if (CP%want_zdrag .or. CP%want_zstar) then !JH: calculate exact zstar and/or zdrag
>
>            r_drag0 = 3.d0/4.d0*CP%omegab*grhom/grhog
>
>            if (CP%want_zstar) call find_z(optdepth,z_star)
>            if (CP%want_zdrag) call find_z(dragoptdepth,z_drag)
>
>         end if




36. arbitrary
2371c2455
<
---
>



37. already updated
2378c2462,2463
<               dtau0=Maxtau/500._dl/AccuracyBoost
---
>               dtau0=Maxtau/500._dl/AccuracyBoost
>               if (do_bispectrum) dtau0 = dtau0/3



38. already there
2458c2543,2623
<
---
> !!!!!!!!!!!!!!!!!!!
> !JH: functions and subroutines for calculating z_star and z_drag
>
>         function doptdepth_dz(z)
>           real(dl) :: doptdepth_dz
>           real(dl), intent(in) :: z
>           real(dl) :: a
>           real(dl) :: dtauda
>           external dtauda
>
>           a = 1._dl/(1._dl+z)
>
>           !ignoring reionisation, not relevant for distance measures
>           doptdepth_dz = Recombination_xe(a)*akthom*dtauda(a)
>
>         end function doptdepth_dz
>
>         function optdepth(z)
>           real(dl) :: rombint2
>           external rombint
>           real(dl) optdepth
>           real(dl),intent(in) :: z
>
>           optdepth = rombint2(doptdepth_dz, 0.d0, z, 1d-5, 20, 100)
>
>         end function optdepth
>
>
>         function ddragoptdepth_dz(z)
>           real(dl) :: ddragoptdepth_dz
>           real(dl), intent(in) :: z
>           real(dl) :: a
>           real(dl) :: dtauda
>           external dtauda
>
>           a = 1._dl/(1._dl+z)
>           ddragoptdepth_dz = doptdepth_dz(z)/r_drag0/a
>
>         end function ddragoptdepth_dz
>
>
>         function dragoptdepth(z)
>           real(dl) :: rombint2
>           external rombint
>           real(dl) dragoptdepth
>           real(dl),intent(in) :: z
>
>           dragoptdepth =  rombint2(ddragoptdepth_dz, 0.d0, z, 1d-5, 20, 100)
>
>         end function dragoptdepth
>
>
>        subroutine find_z(func,zout)  !find redshift at which (photon/drag) optical depth = 1
>           real(dl), external :: func
>           real(dl), intent(out) :: zout
>           real(dl) :: try1,try2,diff,avg
>           integer :: i
>
>           try1 = 0.d0
>           try2 = 10000.d0
>
>           i=0
>           diff = 10.d0
>          do while (diff .gt. 1d-3)
>              i=i+1
>              if (i .eq. 100) stop 'optical depth redshift finder did not converge'
>
>              diff = func(try2)-func(try1)
>              avg = 0.5d0*(try2+try1)
>              if (func(avg) .gt. 1.d0) then
>                 try2 = avg
>              else
>                 try1 = avg
>              end if
>           end do
>
>           zout = avg
>
>         end subroutine find_z
>
> !!!!!!!!!!!!!!!!!!! end JH
